                    I. SQL CREATE (Review)

PRIMARY KEY are implicitly UNIQUE and NOT NULL

SQL client connects to (1) DB at a time either via psql or pgAdmin

Schema --> namespaces within dbs; provides logical groups/structure 

Data cell's unique tuple format: (database, schema, table, column, row)

===============================================================================
                        II. SQL INSERT

Syntax:

INSERT INTO <table_name> (column1_name, column2_name, column3_name)
VALUES (val1, val2, val3);

Example of inserting a new row into the `cars` table w/ year, make model

INSERT INTO cars (year, make, model)
VALUES (2016, 'Toyota', 'CRV');

NOTE: there was no insertion of the primary key `id` column for the `cars` table
      as `INSERT` automatically sets a new row and since the pk was set to SERIAL
      it will automatically increment the `id` column

===============================================================================
                        III. SQL ALTER

Syntax for adding a new column:

ALTER TABLE <table_name_to_alter>
ADD <new_col_name> <data_type> <data_constraint(s)> <default_clause>
-----------------------------------------------------------------
Example of adding a new column to `cars` table example:

ALTER TABLE cars
ADD wheel_count INT NOT NULL DEFAULT 4;
-----------------------------------------------------------------

Example of inserting a new row to `cars` w/ overriding value for `wheel_count`:

INSERT INTO cars (make, model, wheel_count)
VALUES ('Elio', 'P5', 3);

>>> year = NULL; make = Elio; model = P5; wheel_count = 3
NOTE: since `year` was omitted with the INSERT, it defaulted to a `null` value as 
      the car has not been released yet; also the wheel_count default of 4 has been
      overriden by the inputted value 3
===============================================================================
                        IV. SQL UPDATE

Syntax:

UPDATE <table_name_to_update>
SET column1 = val1, column2 = val2, ...
WHERE some_column = some_val

Example of updating the `cars` table to specify the `make` w/ the official company name
(where ever the `make` column has 'Ford' as its value, set the new value as the company name):

UPDATE cars
SET make = 'The Ford Motor Company'
WHERE make = 'Ford';

===============================================================================
                        V. SQL DELETE & DROP

Syntax:

DELETE FROM <table_name>
WHERE some_column = some_value;

Example of deleting any row where `year` is `null`:

DELETE FROM cars
WHERE year IS NULL;

(NOTE: use `IS` or `IS NOT` instead of `=` or `!=` when comparing to null)

ON DELETE solutions:
(1) CASCADE --> deletes all corresponding records
    ex: Alice has a customer_id of 1. If Alice is deleted from the `customers` table, all corresponding orders by Alice w/ a
        fk `customer_id` of `1` (aka Alice) in the `orders` table will also be deleted

(2) SET NULL --> set fk to NULL (key must be nullable)
===============================================================================
                        VI. SQL SELECT

Syntax:

SELECT column_name1, column_name2, FROM <table_name>;

Example of selecting (2) columns from a table called books:

SELECT title, author FROM books;

NOTE: the SELECT query will return a result set in the order it was queried, so if 
`SELECT author, title FROM books;` was the query, even if the `books` table had 
| id | title | author | genre | year |, it would return the following:
| author | title | since that is how the query was defined 

-------------------------------------------------------------------------------

                    Aliasing *column* names w/ `SELECT as` 

Syntax:

SELECT <column1_name> as <new_col1_name>, <column2_name> as <new_col2_name> FROM <table_name>

Example:

SELECT author as book_author, title as book_title FROM books;

>>> | author | title | -- changed to --> | book_author | book_title |
-------------------------------------------------------------------------------
                        
                Aliasing *table* names w/ dot notation in a SELECT query

Syntax example:

SELECT b.author as book_author, b.title as book_title FROM books b;
===============================================================================
===============================================================================

                                Conditional Expressions

1. Filtering

WHERE --> provides a way to filter result sets

    ex: SELECT title, author FROM books WHERE genre = 'Novel';
    " from the books table, grab the title and author values only for the data sets that
      have a genre value equal to string 'Novel' " 

NOTE: WHERE clause must come *before* ORDER BY clause
-------------------------------------------------------------------------------
2. Logical Operators (AND, OR, >, >=, <>) 
        (tip: '<>' is the not-equal operator in SQL syntax aka '!=')
example:

SELECT title, author, year
FROM books
WHERE genre = 'Novel' AND year < 1900; 
-------------------------------------------------------------------------------
3. Duplicates

DISTINCT --> eliminates duplicate rows from the result set

example:

SELECT genre FROM books;
>>> | genre| --> 1. Novel 2. Novel 3. Magical Realism 4. Novel

SELECT DISTINCT genre FROM books;
>>> | genre| --> 1. Novel 2. Magical Realism 
-------------------------------------------------------------------------------

4. Capping result set

LIMIT --> caps result set at specified # of rows

example:

SELECT DISTINCT genre FROM books;
>>> | genre| --> 1. Novel 2. Magical Realism 

SELECT DISTINCT genre FROM books LIMIT 1;
>>> | genre| --> 1. Novel
-------------------------------------------------------------------------------

5. BETWEEN (logical SQL operator)
    - operators on a column using given upper and lower bounds
    - evalutes as TRUE if column's value is b/w the U/L bounds
    - bounds are *inclusive*, that is, a column_value = upper OR lower bound will
      evaluate as TRUE
    ------------------------
python fn equivalent:

    def BETWEEN(value, l_bound, u_bound):
        return value >= l_bound and value <= u_bound
    ------------------------
example query:

SELECT b.title as twentieth_century_books
FROM books b
WHERE b.year BETWEEN 1900 AND 1999;

>>> | twentieth_century_books | --> 1. The Great Gatsby (1925) 2. Big Fish (1998) 

NOTE: upper/lower bounds are INCLUSIVE, so if the above query had
`WHERE b.year BETWEEN 1900 AND 2000;`, this would include the year 2000
which is the start of the 21st century! Keep this in mind when deciding
which upper/lower bounds to define 
-------------------------------------------------------------------------------
                                LIKE and ILIKE

`%` --> matches any sequence of zero or more characters; aka "fuzzy matching"
`_` --> matches any single character; aka "strict matching"

example:

input value using `LIKE` = "Big Fish"
pattern recognized = "Big%"; result = TRUE
 >>> since % is a wildcard 'Big%" will match "Big Fish"

example 2 (case sensitive) for book titles that *begin* w/ T:

SELECT b.title FROM books b
WHERE b.title LIKE 'T%'
>> |1. The Great Gatsby |

example 3 (case sensitive) for book titles that *contain* T: 

SELECT b.title FROM books b
WHERE b.title LIKE '%T%'
>> |1. The Great Gatsby |

example 3 (case insensitive) for book titles that *contain* T or t: 

SELECT b.title FROM books b
WHERE b.title ILIKE '%T%'
>> |1. Frankenstein| 2. The Great Gatsby | Don Quixote |
-------------------------------------------------------------------------------
                                IN 
- evalutes as TRUE if list of options contains specified value
- similar to `in` keyword in Python syntax:
    
    ------------------------
    def IN(value, options):
        return value in options

    options = [1, 2, 3]
    1 in options >>> TRUE
    4 in options >>> FALSE
    ------------------------


example:

SELECT b.title, b.year FROM books b
WHERE b.year IN (1990, 1986, 1996, 1998);
>>> |1.  Big Fish (1998) |
===============================================================================
                        VII. SQL ORDER BY
- sorts result sets
- must come *after* WHERE clause (if present)
- specifies columns to sort by in order of precedence
- column_name = sort_expression
- ascending order by default, use DESC to reverse (see example below)
- when applied to TEXT data type column, the data will be sorted alphabetically
        --------------------------------
    example of ASC (default) vs. DESC to reverse:
        SELECT * FROM books
        ORDER BY year; 
        >>> 1605, 1818, 1925, 1998

        SELECT * FROM books
        ORDER BY year DESC; 
        >>> 1998, 1925, 1818, 1605
        --------------------------------

Syntax of ORDER BY:

SELECT
    select_list
FROM
    table_name
ORDER BY
    sort_expression1 [ASC | DESC],
            ...
    sort_expressionN [ASC | DESC];

-------------------------------------------

Syntax of tiebreaker case:

SELECT * FROM books
ORDER BY genre, author DESC;

explanation: since there was a "tie" due to three differnt data points having the same `Novel` genre, an additional 
ORDER BY clause was defined by having the author column in a DESC, so from Z - A

