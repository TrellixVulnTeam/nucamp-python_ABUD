================================
            Docker CLI 

docker compose up -d
--> start or restart all services in the docker-compose.yml file
the `-d` flag runs containers in "detached" (background) mode; can be ran w/o this flag which will show log msgs from the process

 docker compose ps 
--> lists the containers for these services
    NAME, COMMAND, SERVICE, STATUS, PORTS

docker compose stop
--> stops all services (containers) in the docker-compose.yml file; equivalent to powering down a computer
    can be verified by running `docker compose ps` and seeing STATUS of "exited" 

docker compose down
--> completely tears down the containers; should NOT use this unless you wish to reset EVERYTHING 

docker exec -it pg_container psql -U postgres
--> "give me an interactive terminal (`-it`) inside a container called 'pg_container' and execute psql as a default User"


cat week1_script.sql | docker exec -i pg_container psql -d week1 
--> "inside the Docker container named `pg_container`, use psql to connect to the db named `week1` and feed it `week1_script.sql` as input"

NOTE: in git bash, you must prefix the docker commands w/ `winpty` as follows:
    winpty docker exec -it pg_container psql -d week2

docker ps -a
--> lists the containers, images, and other useful info
    CONTAINER ID, IMAGE, COMMAND, CREATED, STATUS, PORTS, NAMES

docker rm <HASH>
--> removes the provided HASH related to the CONTAINER ID; aka removes the container 
================================
            pSQL CLI

postgres=# \?
--> prints out a list of psql commands
tips: use spacebar to view next page; use enter to advance to the next line

postgres=# \c <db_name>
--> connects to the db 

postgres=# \dt
--> shows data tables w/in connected db (if any)

postgres=# \q
--> quit

postgres=# \l
--> list dbs

postgres=# \d <table_name>
--> describe table
